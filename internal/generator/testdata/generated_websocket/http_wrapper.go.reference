package service

import (
	"encoding/json"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/popescu-af/saas-y/pkg/connection"
	"github.com/popescu-af/saas-y/pkg/log"

	"foo-service/pkg/exports"
)

// HTTPWrapper decorates the APIs with from/to HTTP code.
type HTTPWrapper struct {
	api exports.API
}

// NewHTTPWrapper creates an HTTP wrapper for the service API.
func NewHTTPWrapper(api exports.API) *HTTPWrapper {
	return &HTTPWrapper{api: api}
}

func encodeJSONResponse(i interface{}, status *int, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if status != nil {
		w.WriteHeader(*status)
	} else {
		w.WriteHeader(http.StatusOK)
	}

	return json.NewEncoder(w).Encode(i)
}

func parseIntParameter(param string) (int64, error) {
	return strconv.ParseInt(param, 10, 64)
}

func parseUintParameter(param string) (uint64, error) {
	return strconv.ParseUint(param, 10, 64)
}

func parseFloatParameter(param string) (float64, error) {
	return strconv.ParseFloat(param, 64)
}

// Paths lists the paths that the API serves.
func (h *HTTPWrapper) Paths() Paths {
	return Paths{
		{
			strings.ToUpper("GET"),
			"/some_path",
			h.Method0,
		},
		{
			strings.ToUpper("POST"),
			"/some_path",
			h.Method2,
		},
		{
			strings.ToUpper("WS"),
			"/some_path",
			h.MethodWs1,
		},
	}
}

// Method0 HTTP wrapper.
func (h *HTTPWrapper) Method0(w http.ResponseWriter, r *http.Request) {
	// Query params
	query := r.URL.Query()

	queryParam0, err := parseIntParameter(query.Get("query_param_0"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	queryParam1, err := parseFloatParameter(query.Get("query_param_1"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	queryParam2 := query.Get("query_param_2")

	// Call implementation
	result, err := h.api.Method0(queryParam0, queryParam1, queryParam2)
	if err != nil {
		writeErrorToHTTPResponse(err, w)
		log.ErrorCtx("call to implementation failed", log.Context{"error": err})
		return
	}

	encodeJSONResponse(result, nil, w)
}

// Method2 HTTP wrapper.
func (h *HTTPWrapper) Method2(w http.ResponseWriter, r *http.Request) {
	// Body
	body := &exports.BodyType{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.ErrorCtx("decoding input failed", log.Context{"error": err})
		return
	}

	// Call implementation
	result, err := h.api.Method2(body)
	if err != nil {
		writeErrorToHTTPResponse(err, w)
		log.ErrorCtx("call to implementation failed", log.Context{"error": err})
		return
	}

	encodeJSONResponse(result, nil, w)
}

// MethodWs1 WebSocket wrapper.
func (h *HTTPWrapper) MethodWs1(w http.ResponseWriter, r *http.Request) {
	handler, err := h.api.NewMethodWs1Handler()
	if err != nil {
		writeErrorToHTTPResponse(err, w)
		log.ErrorCtx("creating instance of MethodWs1Handler failed", log.Context{"error": err})
		return
	}

	conn, err := connection.NewWebSocketServer(w, r, handler, time.Second)
	if err != nil {
		writeErrorToHTTPResponse(err, w)
		log.ErrorCtx("creating websocket connection failed", log.Context{"error": err})
		return
	}
	defer conn.Close()

	conn.Run()
}
